Create a new user
Creates a new user.

By default, the user needs to verify their email address before logging in. To turn this off, disable Confirm email in your project.
Confirm email determines if users need to confirm their email address after signing up.
If Confirm email is enabled, a user is returned but session is null.
If Confirm email is disabled, both a user and a session are returned.
When the user confirms their email address, they are redirected to the SITE_URL by default. You can modify your SITE_URL or add additional redirect URLs in your project.
If signUp() is called for an existing confirmed user:
If Confirm email is enabled in your project, an obfuscated/fake user object is returned.
If Confirm email is disabled, the error message, User already registered is returned.
To fetch the currently logged-in user, refer to getUser().
Parameters
credentials
REQUIRED
SignUpWithPasswordCredentials

Sign up


const { data, error } = await supabase.auth.signUp({
  email: 'example@email.com',
  password: 'example-password',
})

Sign in a user
Log in an existing user with an email and password or phone and password.

Requires either an email and password or a phone number and password.
Parameters
credentials
REQUIRED
SignInWithPasswordCredentials

Sign in with email and password

const { data, error } = await supabase.auth.signInWithPassword({
  email: 'example@email.com',
  password: 'example-password',
})

Sign out a user
Inside a browser context, signOut() will remove the logged in user from the browser session
and log them out - removing all items from localstorage and then trigger a "SIGNED_OUT" event.

In order to use the signOut() method, the user needs to be signed in first.
Parameters
options
Optional
SignOut

Open accepted values


Sign out

const { error } = await supabase.auth.signOut()


Retrieve a session
Returns the session, refreshing it if necessary.
The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.

This method retrieves the current local session (i.e local storage).
If the session has an expired access token, this method will use the refresh token to get a new session.

Get the session data

const { data, error } = await supabase.auth.getSession()

Retrieve a new session
Returns a new session, regardless of expiry status.
Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().
If the current session's refresh token is invalid, an error will be thrown.

This method will refresh and return a new session whether the current one is expired or not.
Parameters
currentSession
Optional
object
The current session. If passed in, it must contain a refresh token.


Open accepted values

Refresh session using the current session

Refresh session using a refresh token

const { data, error } = await supabase.auth.refreshSession()
const { session, user } = data

Retrieve a user
Gets the current user details if there is an existing session.

This method fetches the user object from the database instead of local session.
This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.
Should be used only when you require the most current user data. For faster results, getSession().session.user is recommended.
Parameters
jwt
Optional
string
Takes in an optional access token jwt. If no jwt is provided, getUser() will attempt to get the jwt from the current session.


Get the logged in user with the current existing session

Get the logged in user with a custom access token jwt

const { data: { user } } = await supabase.auth.getUser()

Update a user
Updates user data for a logged in user.

In order to use the updateUser() method, the user needs to be signed in first.
By default, email updates sends a confirmation link to both the user's current and new email. To only send a confirmation link to the user's new email, disable Secure email change in your project's email auth provider settings.
Parameters
attributes
REQUIRED
UserAttributes

Open accepted values





options
Optional
object

Open accepted values

Update the email for an authenticated user

Update the password for an authenticated user

Update the user's metadata

Update the user's password with a nonce

const { data, error } = await supabase.auth.updateUser({email: 'new@email.com'})

Set the session data
Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.
If the refresh token or access token in the current session is invalid, an error will be thrown.

setSession() takes in a refresh token and uses it to get a new session.
The refresh token can only be used once to obtain a new session.
Refresh token rotation is enabled by default on all projects to guard against replay attacks.
You can configure the REFRESH_TOKEN_REUSE_INTERVAL which provides a short window in which the same refresh token can be used multiple times in the event of concurrency or offline issues.
Parameters
currentSession
REQUIRED
object
The current session that minimally contains an access token and refresh token.


Open accepted values

Refresh the session

  const { data, error } = supabase.auth.setSession({
    access_token,
    refresh_token
  })


Notes
Listen to auth events
Receive a notification every time an auth event happens.

Types of auth events: SIGNED_IN, SIGNED_OUT, TOKEN_REFRESHED, USER_UPDATED, PASSWORD_RECOVERY
Currently, onAuthStateChange() does not work across tabs. For instance, in the case of a password reset flow, the original tab which requested for the password reset link will not receive the SIGNED_IN and PASSWORD_RECOVERY event when the user clicks on the link.
Parameters
callback
REQUIRED
function
A callback function to be invoked when an auth event happens.


Listen to auth changes

Listen to password recovery events

Listen to sign in

Listen to sign out

Listen to token refresh

Listen to user updates

supabase.auth.onAuthStateChange((event, session) => {
  console.log(event, session)
})

Exchange an auth code for a session
Log in an existing user by exchanging an Auth Code issued during the PKCE flow.

Used when flowType is set to pkce in client options.
Parameters
authCode
REQUIRED
string

Exchange Auth Code

supabase.auth.ex